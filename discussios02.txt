Git VCS
    - Git VCS is an open source version control system. It allows us to track and update our files with only the change made to it


    Local Repositories 
    - Folder that use git technology. Therefore, it allows us to track changes made in the files with the folder, these changes can then be uploaded and update the files in our remote repo|


    Remote Repositories 
    - (Github or Gitlab)
    - These are folder that use git technology but instead located


    SSH key
    - Secure Shell key are tools we use to authenticate the uploading or of other task when manipulating or using git repositories.
    - it allows us to push/upload changes to our repos without the needs of passwords

    To Create SSH key 

   - terminal/Gitbash
   -ssh-keygen
   -is a command-line utility that is used to generate, manage and SSH keys

   -randomart image
   -visual representation of an SSH key's fingerprint. It is created by the 'ssh-keygen' command when generating an SSH key

   Git commands
   -git status
      - it allows us to display files that are ready to be added and then commited 
      -let us see the current state of your local repo
      -git init
      - used to create a new empty git repo
      -git directory in the current directory. This directory contains all the necessary files and directories that git needs to manage

- git add .
-it adds all modified and untracked files in the current directory and its subdirectories to the staging areas

-staging area
- it is a temporary storage area where you can gather or review changes before you commit them to your repo

git commit -m "<yourCommitMessage>"

-is used to create a new commit in your git repo.
-commit
-is a snapshot of your repo at a particular poin in time and includes all the changes that you have made

-m

- an attributes to include/add commit message directly in command line

-git log 

-used to display the commit history of a git repo

- option:

> --online
> --graph
> -n
>--author

- Git config
These commands will allow us to have git recognize the person trying to push into online/remote repo:
     
     - git config --global user.name
     "userNameUsedInGitHub"

     -configure the name used to push into the remote repo
     - git config user.name
     - to verify the configure name


     git config --global user.email
     "emailUserIdInGitHub"
     - configure the email used to push into the remote repo
     -git config user.email
     -to verify the configure email




     Steps:

     -new file

     -git status

     (fatal....)

     - git init

     - git status

     - git add .

     - git status


     - git commit -m "Initial commit"

     Existing File

     - git status
     - git add .
     - git status
     - git commit -m"<commitMessages>"
